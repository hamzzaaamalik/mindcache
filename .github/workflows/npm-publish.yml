name: NPM Package Publishing

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to publish (sdk, cli, all)'
        required: true
        default: 'all'
        type: choice
        options:
          - sdk
          - cli
          - all
      version:
        description: 'Version type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      dry_run:
        description: 'Dry run (do not actually publish)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  RUST_VERSION: '1.70'

jobs:
  # Job 1: Setup and prepare
  prepare:
    runs-on: ubuntu-latest
    outputs:
      sdk_changed: ${{ steps.changes.outputs.sdk }}
      cli_changed: ${{ steps.changes.outputs.cli }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            sdk:
              - 'sdk/**'
              - 'package.json'
            cli:
              - 'cli/**'
              - 'package.json'

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=patch" >> $GITHUB_OUTPUT
          fi

  # Job 2: Test Rust core
  test-rust:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy
          override: true

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rust-core/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('rust-core/Cargo.lock') }}

      - name: Check Rust formatting
        run: |
          cd rust-core
          cargo fmt --check

      - name: Run Clippy
        run: |
          cd rust-core
          cargo clippy -- -D warnings

      - name: Run Rust tests
        run: |
          cd rust-core
          cargo test

      - name: Build Rust release
        run: |
          cd rust-core
          cargo build --release

      - name: Upload Rust artifacts
        uses: actions/upload-artifact@v3
        with:
          name: rust-artifacts
          path: rust-core/target/release/

  # Job 3: Test Node.js API
  test-api:
    needs: test-rust
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: node-api/package-lock.json

      - name: Download Rust artifacts
        uses: actions/download-artifact@v3
        with:
          name: rust-artifacts
          path: rust-core/target/release/

      - name: Install API dependencies
        run: |
          cd node-api
          npm ci

      - name: Run API tests
        run: |
          cd node-api
          npm test

      - name: Run integration tests
        run: |
          cd node-api
          npm run test:integration

  # Job 4: Build and test SDK
  build-sdk:
    needs: [prepare, test-api]
    if: needs.prepare.outputs.sdk_changed == 'true' || github.event.inputs.package == 'sdk' || github.event.inputs.package == 'all' || github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Install SDK dependencies
        run: |
          cd sdk
          npm ci

      - name: Run SDK tests
        run: |
          cd sdk
          npm test

      - name: Build SDK
        run: |
          cd sdk
          npm run build

      - name: Check SDK bundle size
        run: |
          cd sdk
          npm run bundle-size || echo "Bundle size check not available"

      - name: Update SDK version
        if: github.event_name == 'workflow_dispatch'
        run: |
          cd sdk
          npm version ${{ needs.prepare.outputs.version }} --no-git-tag-version

      - name: Pack SDK
        run: |
          cd sdk
          npm pack

      - name: Upload SDK package
        uses: actions/upload-artifact@v3
        with:
          name: sdk-package
          path: sdk/*.tgz

  # Job 5: Build and test CLI
  build-cli:
    needs: [prepare, test-api]
    if: needs.prepare.outputs.cli_changed == 'true' || github.event.inputs.package == 'cli' || github.event.inputs.package == 'all' || github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Install CLI dependencies
        run: |
          cd cli
          npm ci

      - name: Run CLI tests
        run: |
          cd cli
          npm test

      - name: Test CLI commands
        run: |
          cd cli
          node mindcache.js --help
          node mindcache.js --version

      - name: Update CLI version
        if: github.event_name == 'workflow_dispatch'
        run: |
          cd cli
          npm version ${{ needs.prepare.outputs.version }} --no-git-tag-version

      - name: Pack CLI
        run: |
          cd cli
          npm pack

      - name: Upload CLI package
        uses: actions/upload-artifact@v3
        with:
          name: cli-package
          path: cli/*.tgz

  # Job 6: Security audit
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Audit SDK dependencies
        run: |
          cd sdk
          npm audit --audit-level=high

      - name: Audit CLI dependencies
        run: |
          cd cli
          npm audit --audit-level=high

      - name: Audit API dependencies
        run: |
          cd node-api
          npm audit --audit-level=high

      - name: Check for vulnerabilities with Snyk
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects --severity-threshold=high

  # Job 7: Publish SDK to NPM
  publish-sdk:
    needs: [build-sdk, security-audit]
    if: success() && (github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.package == 'sdk' || github.event.inputs.package == 'all')))
    runs-on: ubuntu-latest
    environment: npm-publish
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Download SDK package
        uses: actions/download-artifact@v3
        with:
          name: sdk-package
          path: ./

      - name: Extract and prepare SDK
        run: |
          tar -xzf mindcache-sdk-*.tgz
          cd package

      - name: Dry run publish SDK
        if: github.event.inputs.dry_run == 'true'
        run: |
          cd package
          npm publish --dry-run
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish SDK to NPM
        if: github.event.inputs.dry_run != 'true'
        run: |
          cd package
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create SDK release notes
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "🎉 MindCache SDK published to NPM!" >> $GITHUB_STEP_SUMMARY
          echo "📦 Package: mindcache-sdk" >> $GITHUB_STEP_SUMMARY
          echo "🔗 https://www.npmjs.com/package/mindcache-sdk" >> $GITHUB_STEP_SUMMARY

  # Job 8: Publish CLI to NPM
  publish-cli:
    needs: [build-cli, security-audit]
    if: success() && (github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.package == 'cli' || github.event.inputs.package == 'all')))
    runs-on: ubuntu-latest
    environment: npm-publish
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Download CLI package
        uses: actions/download-artifact@v3
        with:
          name: cli-package
          path: ./

      - name: Extract and prepare CLI
        run: |
          tar -xzf mindcache-cli-*.tgz
          cd package

      - name: Dry run publish CLI
        if: github.event.inputs.dry_run == 'true'
        run: |
          cd package
          npm publish --dry-run
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish CLI to NPM
        if: github.event.inputs.dry_run != 'true'
        run: |
          cd package
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create CLI release notes
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "🎉 MindCache CLI published to NPM!" >> $GITHUB_STEP_SUMMARY
          echo "📦 Package: mindcache-cli" >> $GITHUB_STEP_SUMMARY
          echo "🔗 https://www.npmjs.com/package/mindcache-cli" >> $GITHUB_STEP_SUMMARY

  # Job 9: Update documentation
  update-docs:
    needs: [publish-sdk, publish-cli]
    if: always() && (needs.publish-sdk.result == 'success' || needs.publish-cli.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Update README badges
        run: |
          # Update SDK version badge
          if [ -f sdk/package.json ]; then
            SDK_VERSION=$(node -p "require('./sdk/package.json').version")
            sed -i "s/sdk-v[0-9.]*/sdk-v$SDK_VERSION/g" README.md
          fi
          
          # Update CLI version badge
          if [ -f cli/package.json ]; then
            CLI_VERSION=$(node -p "require('./cli/package.json').version")
            sed -i "s/cli-v[0-9.]*/cli-v$CLI_VERSION/g" README.md
          fi

      - name: Generate changelog
        run: |
          echo "## 📦 Published Packages" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          if [ "${{ needs.publish-sdk.result }}" == "success" ]; then
            SDK_VERSION=$(node -p "require('./sdk/package.json').version")
            echo "- **SDK v$SDK_VERSION**: https://www.npmjs.com/package/mindcache-sdk" >> CHANGELOG_TEMP.md
          fi
          if [ "${{ needs.publish-cli.result }}" == "success" ]; then
            CLI_VERSION=$(node -p "require('./cli/package.json').version")
            echo "- **CLI v$CLI_VERSION**: https://www.npmjs.com/package/mindcache-cli" >> CHANGELOG_TEMP.md
          fi
          echo "" >> CHANGELOG_TEMP.md

      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md CHANGELOG_TEMP.md
          git diff --staged --quiet || git commit -m "📚 Update documentation after NPM publish"
          git push

  # Job 10: Create GitHub release
  create-release:
    needs: [publish-sdk, publish-cli]
    if: always() && github.event_name == 'workflow_dispatch' && (needs.publish-sdk.result == 'success' || needs.publish-cli.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get package versions
        id: versions
        run: |
          if [ -f sdk/package.json ]; then
            SDK_VERSION=$(node -p "require('./sdk/package.json').version")
            echo "sdk_version=$SDK_VERSION" >> $GITHUB_OUTPUT
          fi
          if [ -f cli/package.json ]; then
            CLI_VERSION=$(node -p "require('./cli/package.json').version")
            echo "cli_version=$CLI_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.versions.outputs.sdk_version || steps.versions.outputs.cli_version }}
          release_name: Release v${{ steps.versions.outputs.sdk_version || steps.versions.outputs.cli_version }}
          body: |
            ## 🚀 New Release
            
            ### 📦 Published Packages
            
            ${{ needs.publish-sdk.result == 'success' && format('- **SDK v{0}**: https://www.npmjs.com/package/mindcache-sdk', steps.versions.outputs.sdk_version) || '' }}
            ${{ needs.publish-cli.result == 'success' && format('- **CLI v{0}**: https://www.npmjs.com/package/mindcache-cli', steps.versions.outputs.cli_version) || '' }}
            
            ### 📖 Installation
            
            ```bash
            # Install SDK
            npm install mindcache-sdk
            
            # Install CLI globally
            npm install -g mindcache-cli
            ```
            
            ### 🔗 Links
            
            - [Documentation](https://mindcache.dev/docs)
            - [API Reference](https://mindcache.dev/api)
            - [Examples](https://github.com/mindcache/mindcache/tree/main/examples)
          draft: false
          prerelease: false

  # Job 11: Notify on success/failure
  notify:
    needs: [publish-sdk, publish-cli, create-release]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify on success
        if: needs.publish-sdk.result == 'success' || needs.publish-cli.result == 'success'
        run: |
          echo "🎉 NPM packages published successfully!" >> $GITHUB_STEP_SUMMARY
          echo "Check https://www.npmjs.com/org/mindcache for published packages" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: needs.publish-sdk.result == 'failure' || needs.publish-cli.result == 'failure'
        run: |
          echo "❌ NPM publish failed!" >> $GITHUB_STEP_SUMMARY
          echo "Check the workflow logs for details" >> $GITHUB_STEP_SUMMARY

      # Optional: Slack/Discord notification
      - name: Slack Notification
        if: always() && (needs.publish-sdk.result == 'success' || needs.publish-cli.result == 'success')
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "🎉 MindCache NPM packages published!",
              attachments: [{
                color: 'good',
                fields: [{
                  title: 'Published Packages',
                  value: '${{ needs.publish-sdk.result == "success" && "• SDK\n" || "" }}${{ needs.publish-cli.result == "success" && "• CLI\n" || "" }}',
                  short: true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
